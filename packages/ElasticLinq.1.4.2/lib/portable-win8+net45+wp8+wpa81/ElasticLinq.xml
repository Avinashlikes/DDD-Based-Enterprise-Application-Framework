<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ElasticLinq</name>
    </assembly>
    <members>
        <member name="T:ElasticLinq.Async.AsyncQueryable">
            <summary>
            Provides a set of static methods for querying data structures that implement <see cref="T:System.Linq.IQueryable`1"/> in an asynchronous manner.
            </summary>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Int32"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the source sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int32"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Int64"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the source sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int64"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Single"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the source sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Single"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Double"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the source sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Double"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Decimal"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the source sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal"/> values to calculate the average of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the <paramref name="source"/> sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the <paramref name="source"/> sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the <paramref name="source"/> sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the <paramref name="source"/> sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values.
            </returns>
            <param name="source">A sequence of values that are used to calculate an average.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the average of the sequence of values, or null if the <paramref name="source"/> sequence is empty or contains only null values.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the number of elements in a sequence.
            </summary>
            <returns>
            A task that returns the number of elements in the input sequence.
            </returns>
            <param name="source">The <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the number of elements in the specified sequence that satisfies a condition.
            </summary>
            <returns>
            A task that returns the number of elements in the sequence that satisfies the condition in the predicate function.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns an <see cref="T:System.Int64"/> that represents the total number of elements in a sequence.
            </summary>
            <returns>
            A task that returns the number of elements in <paramref name="source"/>.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">The number of elements exceeds <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns an <see cref="T:System.Int64"/> that represents the number of elements in a sequence that satisfy a condition.
            </summary>
            <returns>
            A task that returns the number of elements in <paramref name="source"/> that satisfy the condition in the predicate function.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.OverflowException">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the minimum value of a generic <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <returns>
            A task that returns the minimum value in the sequence.
            </returns>
            <param name="source">A sequence of values to determine the minimum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1"/> and returns the minimum resulting value.
            </summary>
            <returns>
            A task that returns the minimum value in the sequence.
            </returns>
            <param name="source">A sequence of values to determine the minimum of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <returns>
            A task that returns the maximum value in the sequence.
            </returns>
            <param name="source">A sequence of values to determine the maximum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1"/> and returns the maximum resulting value.
            </summary>
            <returns>
            A task that returns the maximum value in the sequence.
            </returns>
            <param name="source">A sequence of values to determine the maximum of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collection.List`1"/> from an <see cref="T:System.Linq.IQueryable`1"/> that is executed asyncronously.
            </summary>
            <returns>
            A task that returns the newly created list.
            </returns>
            <param name="source">A sequence of values to create a list from.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates an array from an <see cref="T:System.Linq.IQueryable`1"/> that is executed asyncronously.
            </summary>
            <returns>
            A task that returns the newly created array.
            </returns>
            <param name="source">A sequence of values to create an array from.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="keySelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
            <returns>
            A task that returns the first element in <paramref name="source"/>.
            </returns>
            <param name="source">The <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <returns>
            A task that returns the first element in <paramref name="source"/> that passes the test in <paramref name="predicate"/>.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>.-or-The source sequence is empty.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <returns>
            A task that returns default(<typeparamref name="TSource"/>) if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.
            </returns>
            <param name="source">The <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <returns>
            A task that returns default(<typeparamref name="TSource"/>) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <returns>
            A task that returns the single element of the input sequence.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> has more than one element.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <returns>
            A task that returns the single element of the input sequence that satisfies the condition in <paramref name="predicate"/>.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>.-or-More than one element satisfies the condition in <paramref name="predicate"/>.-or-The source sequence is empty.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <returns>
            A task that returns the single element of the input sequence, or default(<typeparamref name="TSource"/>) if the sequence contains no elements.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> has more than one element.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <returns>
            A task that returns the single element of the input sequence that satisfies the condition in <paramref name="predicate"/>, or default(<typeparamref name="TSource"/>) if no such element is found.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Int32"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int32"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Int64"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int64"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Single"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Single"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Double"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Double"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Double"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Decimal"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            <returns>
            A task that returns the sum of the values in the sequence.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal"/> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:ElasticLinq.Async.AsyncQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <returns>
            A task that returns the sum of the projected values.
            </returns>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The optional <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel this task.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="T:ElasticLinq.Async.IAsyncQueryExecutor">
            <summary>
            Defines methods to asyncronously execute queries that are described by an <see cref="T:System.Linq.IQueryable" /> object.
            </summary>
        </member>
        <member name="M:ElasticLinq.Async.IAsyncQueryExecutor.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            Executes the query represented by a specified expression tree asyncronously.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <param name="cancellationToken">The optional token to monitor for cancellation requests.</param>
            <returns>The task that returns the value that results from executing the specified query.</returns>
        </member>
        <member name="M:ElasticLinq.Async.IAsyncQueryExecutor.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            Executes the strongly-typed query represented by a specified expression tree asyncronously.
            </summary>
            <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <param name="cancellationToken">The optional token to monitor for cancellation requests.</param>
            <returns>The task that returns the value that results from executing the specified query.</returns>
        </member>
        <member name="T:ElasticLinq.BaseElasticConnection">
            <summary>
            Specifies connection parameters for Elasticsearch.
            </summary>
        </member>
        <member name="T:ElasticLinq.IElasticConnection">
            <summary>
            The interface all clients which make requests to elastic search must implement
            </summary>
        </member>
        <member name="M:ElasticLinq.IElasticConnection.SearchAsync(System.String,ElasticLinq.Request.SearchRequest,System.Threading.CancellationToken,ElasticLinq.Logging.ILog)">
            <summary>
            Issues search requests to elastic search
            </summary>
            <param name="body">The request body</param>
            <param name="searchRequest">The search request settings</param>
            <param name="token"></param>
            <param name="log">The logging mechanism for diagnostic information.</param>
            <returns>An elastic response</returns>
        </member>
        <member name="M:ElasticLinq.IElasticConnection.GetSearchUri(ElasticLinq.Request.SearchRequest)">
            <summary>
            Gets the uri of the search
            </summary>
            <param name="searchRequest">The search request settings</param>
            <returns>The uri of the search</returns>
        </member>
        <member name="P:ElasticLinq.IElasticConnection.Index">
            <summary>
            The name of the index on the Elasticsearch server.
            </summary>
        </member>
        <member name="P:ElasticLinq.IElasticConnection.Options">
            <summary>
            Additional options that specify how this connection should behave.
            </summary>
        </member>
        <member name="P:ElasticLinq.IElasticConnection.Timeout">
            <summary>
            How long to wait for a response to a network request before
            giving up.
            </summary>
        </member>
        <member name="M:ElasticLinq.BaseElasticConnection.#ctor(System.String,System.Nullable{System.TimeSpan},ElasticLinq.ElasticConnectionOptions)">
            <summary>
            Create a new BaseElasticConnection with the given parameters for internal testing.
            </summary>
            <param name="timeout">TimeSpan to wait for network responses before failing (optional, defaults to 10 seconds).</param>
            <param name="index">Name of the index to use on the server (optional).</param>
            <param name="options">Additional options that specify how this connection should behave.</param>
        </member>
        <member name="M:ElasticLinq.BaseElasticConnection.SearchAsync(System.String,ElasticLinq.Request.SearchRequest,System.Threading.CancellationToken,ElasticLinq.Logging.ILog)">
            <summary>
            Issues search requests to elastic search
            </summary>
            <param name="body">The request body</param>
            <param name="searchRequest">The search request settings</param>
            <param name="token">The cancellation token to allow aborting the operation</param>
            <param name="log">The logging mechanism for diagnostic information.</param>
            <returns>An elastic response</returns>
        </member>
        <member name="M:ElasticLinq.BaseElasticConnection.GetSearchUri(ElasticLinq.Request.SearchRequest)">
            <summary>
            Gets the uri of the search
            </summary>
            <param name="searchRequest">The search request settings</param>
            <returns>The uri of the search</returns>
        </member>
        <member name="P:ElasticLinq.BaseElasticConnection.Index">
            <summary>
            The name of the index on the Elasticsearch server.
            </summary>
            <example>northwind</example>
        </member>
        <member name="P:ElasticLinq.BaseElasticConnection.Timeout">
            <summary>
            How long to wait for a response to a network request before
            giving up.
            </summary>
        </member>
        <member name="P:ElasticLinq.BaseElasticConnection.Options">
            <summary>
            Additional options that specify how this connection should behave.
            </summary>
        </member>
        <member name="T:ElasticLinq.ElasticConnection">
            <summary>
            Specifies connection parameters for Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.ElasticConnection.#ctor(System.Uri,System.String,System.String,System.Nullable{System.TimeSpan},System.String,ElasticLinq.ElasticConnectionOptions)">
            <summary>
            Create a new ElasticConnection with the given parameters defining its properties.
            </summary>
            <param name="endpoint">The URL endpoint of the Elasticsearch server.</param>
            <param name="userName">UserName to use to connect to the server (optional).</param>
            <param name="password">Password to use to connect to the server (optional).</param>
            <param name="timeout">TimeSpan to wait for network responses before failing (optional, defaults to 10 seconds).</param>
            <param name="index">Name of the index to use on the server (optional).</param>
            <param name="options">Additional options that specify how this connection should behave.</param>
        </member>
        <member name="M:ElasticLinq.ElasticConnection.#ctor(System.Net.Http.HttpMessageHandler,System.Uri,System.String,System.String,System.String,System.Nullable{System.TimeSpan},ElasticLinq.ElasticConnectionOptions)">
            <summary>
            Create a new ElasticConnection with the given parameters for internal testing.
            </summary>
            <param name="innerMessageHandler">The HttpMessageHandler used to intercept network requests for testing.</param>
            <param name="endpoint">The URL endpoint of the Elasticsearch server.</param>
            <param name="userName">UserName to use to connect to the server (optional).</param>
            <param name="password">Password to use to connect to the server (optional).</param>
            <param name="timeout">TimeSpan to wait for network responses before failing (optional, defaults to 10 seconds).</param>
            <param name="index">Name of the index to use on the server (optional).</param>
            <param name="options">Additional options that specify how this connection should behave.</param>
        </member>
        <member name="M:ElasticLinq.ElasticConnection.Dispose">
            <summary>
            Dispose of this ElasticConnection and any associated resources.
            </summary>
        </member>
        <member name="M:ElasticLinq.ElasticConnection.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticConnection.SearchAsync(System.String,ElasticLinq.Request.SearchRequest,System.Threading.CancellationToken,ElasticLinq.Logging.ILog)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticConnection.GetSearchUri(ElasticLinq.Request.SearchRequest)">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.ElasticConnection.HttpClient">
            <summary>
            The HttpClient used for issuing HTTP network requests.
            </summary>
        </member>
        <member name="P:ElasticLinq.ElasticConnection.Endpoint">
            <summary>
            The Uri that specifies the public endpoint for the server.
            </summary>
            <example>http://myserver.example.com:9200</example>
        </member>
        <member name="T:ElasticLinq.ElasticConnectionOptions">
            <summary>
            Connection options that can be specified to control how <see cref="T:ElasticLinq.ElasticContext"/> communicates with
            Elasticsearch.
            </summary>
        </member>
        <member name="P:ElasticLinq.ElasticConnectionOptions.Pretty">
            <summary>
            Whether the JSON should be prettified to make it more human-readable.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:ElasticLinq.ElasticConnectionOptions.SearchSizeDefault">
            <summary>
            The default size for searches to specify the maximum document count.
            </summary>
            <remarks>Defaults to null, resulting in Elasticseach defaulting to 10.</remarks>
        </member>
        <member name="T:ElasticLinq.ElasticContext">
            <summary>
            Provides an entry point to easily create LINQ queries for Elasticsearch.
            </summary>
        </member>
        <member name="T:ElasticLinq.IElasticContext">
            <summary>
            Represents a unit of work in ElasticLINQ.
            </summary>
        </member>
        <member name="M:ElasticLinq.IElasticContext.Query``1">
            <summary>
            Gets a query that can search for documents of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <returns>The query that can search for documents of the given type.</returns>
        </member>
        <member name="M:ElasticLinq.ElasticContext.#ctor(ElasticLinq.IElasticConnection,ElasticLinq.Mapping.IElasticMapping,ElasticLinq.Logging.ILog,ElasticLinq.Retry.IRetryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.ElasticContext"/> class.
            </summary>
            <param name="connection">The information on how to connect to the Elasticsearch server.</param>
            <param name="mapping">The object that helps map queries (optional, defaults to <see cref="T:ElasticLinq.Mapping.TrivialElasticMapping"/>).</param>
            <param name="log">The object which logs information (optional, defaults to <see cref="T:ElasticLinq.Logging.NullLog"/>).</param>
            <param name="retryPolicy">The object which controls retry policy for the search (optional, defaults to <see cref="P:ElasticLinq.ElasticContext.RetryPolicy"/>).</param>
        </member>
        <member name="M:ElasticLinq.ElasticContext.Query``1">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.ElasticContext.Connection">
            <summary>
            Specifies the connection to the Elasticsearch server.
            </summary>
        </member>
        <member name="P:ElasticLinq.ElasticContext.Log">
            <summary>
            The logging mechanism for diagnostic information.
            </summary>
        </member>
        <member name="P:ElasticLinq.ElasticContext.Mapping">
            <summary>
            The mapping to describe how objects and their properties are mapped to Elasticsearch.
            </summary>
        </member>
        <member name="P:ElasticLinq.ElasticContext.RetryPolicy">
            <summary>
            The retry policy for handling networking issues.
            </summary>
        </member>
        <member name="T:ElasticLinq.ElasticFields">
            <summary>
            Provides properties that stand in for special fields in Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.ElasticFields.BuildException(System.String)">
            <summary>
            Create the InvalidOperationException fired when trying to access properties of this proxy class.
            </summary>
            <param name="memberName">Optional name of the member, automatically figured out via CallerMemberName if not specified.</param>
            <returns>InvalidOperationException with appropriate error message.</returns>
        </member>
        <member name="P:ElasticLinq.ElasticFields.Score">
            <summary>
            A property that stands in for the Elasticsearch _score field.
            </summary>
        </member>
        <member name="P:ElasticLinq.ElasticFields.Id">
            <summary>
            A property that stands in for the Elasticsearch _id field.
            </summary>
        </member>
        <member name="T:ElasticLinq.ElasticMethods">
            <summary>
            Provides methods that stand in for additional operations available in Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.ElasticMethods.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any of the specified items.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate one of the items.</param>
            <param name="items">A sequence containing the items to be located.</param>
            <returns>true if the source sequence contains any of the items; otherwise, false.</returns>
        </member>
        <member name="M:ElasticLinq.ElasticMethods.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains all of the specified items.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate all of the items.</param>
            <param name="items">A sequence containing all the items to be located.</param>
            <returns>true if the source sequence contains all of the items; otherwise, false.</returns>
        </member>
        <member name="M:ElasticLinq.ElasticMethods.Regexp(System.String,System.String)">
            <summary>
            Specifies a regular expression term query for a field.
            </summary>
            <param name="field">Field name to be matched.</param>
            <param name="regexp">Regular expression to be matched against the field.</param>
            <returns>true if the regular expression matches the field startsWith; otherwise, false.</returns>
        </member>
        <member name="M:ElasticLinq.ElasticMethods.Prefix(System.String,System.String)">
            <summary>
            Specifies a prefix term query for a field.
            </summary>
            <param name="field">Field name to be matched.</param>
            <param name="startsWith">String the field must start with to match.</param>
            <returns>true if the field starts with the startsWith; otherwise, false.</returns>
        </member>
        <member name="M:ElasticLinq.ElasticMethods.Prefix(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Specifies a prefix term query for a field.
            </summary>
            <param name="field">Field name to be matched.</param>
            <param name="startsWith">String the field must start with to match.</param>
            <returns>true if the field starts with the startsWith; otherwise, false.</returns>
        </member>
        <member name="M:ElasticLinq.ElasticMethods.BuildException(System.String)">
            <summary>
            Create the InvalidOperationException fired when trying to execute methods of this proxy class.
            </summary>
            <param name="memberName">Optional name of the member, automatically figured out via CallerMemberName if not specified.</param>
            <returns>InvalidOperationException with appropriate error message.</returns>
        </member>
        <member name="T:ElasticLinq.ElasticQuery`1">
            <summary>
            Represents a LINQ query object to be used with Elasticsearch.
            </summary>
            <typeparam name="T">Element type being queried.</typeparam>
        </member>
        <member name="T:ElasticLinq.IElasticQuery`1">
            <summary>
            Represents a LINQ query that will be sent to Elasticsearch.
            </summary>
            <typeparam name="T">Type of element to be queried.</typeparam>
        </member>
        <member name="M:ElasticLinq.IElasticQuery`1.ToQueryInfo">
            <summary>
            Returns the query information including the JSON payload and Uri.
            </summary>
        </member>
        <member name="M:ElasticLinq.ElasticQuery`1.#ctor(ElasticLinq.ElasticQueryProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.ElasticQuery`1"/> class.
            </summary>
            <param name="provider">The <see cref="T:ElasticLinq.ElasticQueryProvider"/> used to execute the queries.</param>
        </member>
        <member name="M:ElasticLinq.ElasticQuery`1.#ctor(ElasticLinq.ElasticQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="provider">The <see cref="T:ElasticLinq.ElasticQueryProvider"/> used to execute the queries.</param>
            <param name="expression">The <see cref="P:ElasticLinq.ElasticQuery`1.Expression"/> that represents the LINQ query so far.</param>
        </member>
        <member name="M:ElasticLinq.ElasticQuery`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticQuery`1.ToQueryInfo">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.ElasticQuery`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.ElasticQuery`1.Expression">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.ElasticQuery`1.Provider">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.ElasticQueryExtensions">
            <summary>
            Extension methods that extend LINQ functionality for Elasticsearch queries.
            </summary>
            <remarks>
            Using these methods against any provider except <see cref="T:ElasticLinq.ElasticQueryProvider"/> will fail.
            </remarks>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.Query``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Queries an Elasticsearch index based on a predicate.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate"/>.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to query.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.QueryString``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Queries an Elasticsearch index based on a query string.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that contains elements from the input sequence that satisfy the condition specified by <paramref name="query"/>.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to query.</param>
            <param name="query">A query string to test each element for.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="query"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.QueryString``1(System.Linq.IQueryable{``0},System.String,System.String[])">
            <summary>
            Queries an Elasticsearch index based on a query string for specific field partterns.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that contains elements from the input sequence that satisfy the condition specified by <paramref name="query"/>.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to query.</param>
            <param name="query">A query string to test each element for.</param>
            <param name="fields">A list of field name patterns to search.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>, <paramref name="query"/> or <paramref name="fields"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.OrderByScore``1(System.Linq.IQueryable{``0})">
            <summary>
            Sorts the elements of a sequence in ascending order by their Elasticsearch score.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to score.
            </returns>
            <param name="source">A sequence of values to order.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.OrderByScoreDescending``1(System.Linq.IQueryable{``0})">
            <summary>
            Sorts the elements of a sequence in descending order by their Elasticsearch score.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to score.
            </returns>
            <param name="source">A sequence of values to order.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.ThenByScore``1(System.Linq.IOrderedQueryable{``0})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by their Elasticsearch score.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to score.
            </returns>
            <param name="source">A sequence of values to order.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.ThenByScoreDescending``1(System.Linq.IOrderedQueryable{``0})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by their Elasticsearch score.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to score.
            </returns>
            <param name="source">A sequence of values to order.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.MinScore``1(System.Linq.IQueryable{``0},System.Double)">
            <summary>
            Specifies a minimum Elasticsearch score.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> whose elements have a score greater or equal to the score specified.
            </returns>
            <param name="source">A sequence of values to apply a minimum score to.</param>
            <param name="score">The minimal acceptable score for results.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.Highlight``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},ElasticLinq.Request.Highlight)">
            <summary>
            Specifies highlighting for search results.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> with elements containing hightlights as specified.
            </returns>
            <param name="source">A sequence of values to order.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="highlight">Highlight specification to apply to search.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.ToQueryInfo``1(System.Linq.IQueryable{``0})">
            <summary>
            Return information about a <see cref="T:ElasticLinq.IElasticQuery`1"/> including the JSON that would be submitted to Elasticsearch.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable{T}"/> to query.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>QueryInfo including the Uri and Elasticsearch DSL JSON representing this query.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> is not of type <see cref="T:ElasticLinq.IElasticQuery`1"/>.</exception>
        </member>
        <member name="M:ElasticLinq.ElasticQueryExtensions.CreateQueryMethodCall``1(System.Linq.IQueryable{``0},System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Creates an expression to call a generic version of the given method with the source and arguments as parameters..
            </summary>
            <typeparam name="TSource">Element type of the query derived from the IQueryable source.</typeparam>
            <param name="source">IQueryable source to use as the first parameter for the given method.</param>
            <param name="method">MethodInfo of the method to call.</param>
            <param name="arguments">Expressions that should be passed to the method as arguments.</param>
            <returns>IQueryable that contains the query with the method call inserted into the query chain.</returns>
        </member>
        <member name="T:ElasticLinq.ElasticQueryProvider">
            <summary>
            Query provider implementation for Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.ElasticQueryProvider.#ctor(ElasticLinq.IElasticConnection,ElasticLinq.Mapping.IElasticMapping,ElasticLinq.Logging.ILog,ElasticLinq.Retry.IRetryPolicy)">
            <summary>
            Create a new ElasticQueryProvider for a given connection, mapping, log, retry policy and field prefix.
            </summary>
            <param name="connection">Connection to use to connect to Elasticsearch.</param>
            <param name="mapping">A mapping to specify how queries and results are translated.</param>
            <param name="log">A log to receive any information or debugging messages.</param>
            <param name="retryPolicy">A policy to describe how to handle network issues.</param>
        </member>
        <member name="M:ElasticLinq.ElasticQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.ElasticQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Logging.ILog">
            <summary>
            An interface which is used for logging various events in ElasticLINQ.
            </summary>
        </member>
        <member name="M:ElasticLinq.Logging.ILog.Log(ElasticLinq.Logging.TraceEventType,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object[])">
            <summary>
            Logs a message to the logging system.
            </summary>
            <param name="type">The event type of the message.</param>
            <param name="ex">The exception (optional).</param>
            <param name="additionalInfo">Additional information to be logged (optional).</param>
            <param name="messageFormat">The message (will be formatted, if <paramref name="args"/> is not null/empty; otherwise,
            should be sent directly to the logging system).</param>
            <param name="args">The arguments for <paramref name="messageFormat"/> (optional).</param>
        </member>
        <member name="T:LogExtensions">
            <summary>
            Various extension methods to make logging to ILog more fluent.
            </summary>
        </member>
        <member name="M:LogExtensions.Debug(ElasticLinq.Logging.ILog,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object[])">
            <summary>
            Logs a debug message to the logging system.
            </summary>
            <param name="log">The <see cref="T:ElasticLinq.Logging.ILog"/>) to receive the message.</param>
            <param name="ex">The exception (optional).</param>
            <param name="additionalInfo">Additional information to be logged (optional).</param>
            <param name="messageFormat">The message (will be formatted, if <paramref name="args"/> is not null/empty; otherwise,
            should be sent directly to the logging system).</param>
            <param name="args">The arguments for <paramref name="messageFormat"/> (optional).</param>
        </member>
        <member name="M:LogExtensions.Error(ElasticLinq.Logging.ILog,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object[])">
            <summary>
            Logs an error message to the logging system.
            </summary>
            <param name="log">The <see cref="T:ElasticLinq.Logging.ILog"/>) to receive the message.</param>
            <param name="ex">The exception (optional).</param>
            <param name="additionalInfo">Additional information to be logged (optional).</param>
            <param name="messageFormat">The message (will be formatted, if <paramref name="args"/> is not null/empty; otherwise,
            should be sent directly to the logging system).</param>
            <param name="args">The arguments for <paramref name="messageFormat"/> (optional).</param>
        </member>
        <member name="M:LogExtensions.Fatal(ElasticLinq.Logging.ILog,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object[])">
            <summary>
            Logs a fatal message to the logging system.
            </summary>
            <param name="log">The <see cref="T:ElasticLinq.Logging.ILog"/>) to receive the message.</param>
            <param name="ex">The exception (optional).</param>
            <param name="additionalInfo">Additional information to be logged (optional).</param>
            <param name="messageFormat">The message (will be formatted, if <paramref name="args"/> is not null/empty; otherwise,
            should be sent directly to the logging system).</param>
            <param name="args">The arguments for <paramref name="messageFormat"/> (optional).</param>
        </member>
        <member name="M:LogExtensions.Info(ElasticLinq.Logging.ILog,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object[])">
            <summary>
            Logs an information message to the logging system.
            </summary>
            <param name="log">The <see cref="T:ElasticLinq.Logging.ILog"/>) to receive the message.</param>
            <param name="ex">The exception (optional).</param>
            <param name="additionalInfo">Additional information to be logged (optional).</param>
            <param name="messageFormat">The message (will be formatted, if <paramref name="args"/> is not null/empty; otherwise,
            should be sent directly to the logging system).</param>
            <param name="args">The arguments for <paramref name="messageFormat"/> (optional).</param>
        </member>
        <member name="M:LogExtensions.Warn(ElasticLinq.Logging.ILog,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object[])">
            <summary>
            Logs a warning message to the logging system.
            </summary>
            <param name="log">The <see cref="T:ElasticLinq.Logging.ILog"/>) to receive the message.</param>
            <param name="ex">The exception (optional).</param>
            <param name="additionalInfo">Additional information to be logged (optional).</param>
            <param name="messageFormat">The message (will be formatted, if <paramref name="args"/> is not null/empty; otherwise,
            should be sent directly to the logging system).</param>
            <param name="args">The arguments for <paramref name="messageFormat"/> (optional).</param>
        </member>
        <member name="T:ElasticLinq.Logging.NullLog">
            <summary>
            An implementation of <see cref="T:ElasticLinq.Logging.ILog"/> which does no logging.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.NullLog.Instance">
            <summary>
            Gets the singleton <see cref="T:ElasticLinq.Logging.NullLog"/> instance.
            </summary>
        </member>
        <member name="M:ElasticLinq.Logging.NullLog.Log(ElasticLinq.Logging.TraceEventType,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Logging.TraceEventType">
            <summary>
            Type of log entry to write to the logging system.
            </summary>
            <remarks>
            Replicates that of the .NET built-in type for PCL compatibility.
            </remarks>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Critical">
            <summary>
            Fatal error or application crash.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Error">
            <summary>
            Recoverable error.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Warning">
            <summary>
            Noncritical problem.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Information">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Verbose">
            <summary>
            Debugging trace.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Start">
            <summary>
            Starting of a logical operation.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Stop">
            <summary>
            Stopping of a logical operation.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Suspend">
            <summary>
            Suspension of a logical operation.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Resume">
            <summary>
            Resumption of a logical operation.
            </summary>
        </member>
        <member name="F:ElasticLinq.Logging.TraceEventType.Transfer">
            <summary>
            Changing of correlation identity.
            </summary>
        </member>
        <member name="T:ElasticLinq.Mapping.CouchbaseElasticMapping">
            <summary>
            Mapping appropriate for use with the Couchbase/Elasticsearch adapter.
            </summary>
        </member>
        <member name="T:ElasticLinq.Mapping.ElasticMapping">
            <summary>
            A base class for mapping Elasticsearch values that can lower-case all field values
            (and respects <see cref="T:ElasticLinq.NotAnalyzedAttribute"/> to opt-out of the lower-casing), 
            camel-case field names, and camel-case and pluralize type names.
            </summary>
        </member>
        <member name="T:ElasticLinq.Mapping.IElasticMapping">
            <summary>
            Interface to describe how types and properties are mapped into Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.Mapping.IElasticMapping.FormatValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Used to format values used in Elasticsearch criteria. Extending this allows you to
            specify rules like lower-casing values for certain types of criteria so that searched
            values match the rules Elasticsearch is using to store/search values.
            </summary>
            <param name="member">The member that this value is searching.</param>
            <param name="value">The value to be formatted.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.IElasticMapping.GetDocumentType(System.Type)">
            <summary>
            Gets the document type name for the given CLR type. Extending this allows you to change the
            mapping of types names in the CLR to document type names in Elasticsearch. For example,
            using the Couchbase/Elasticsearch adapter yields documents with the document type
            "couchbaseDocument", regardless of the CLR type.
            </summary>
            <param name="type">The type whose name is required.</param>
            <returns>Returns the Elasticsearch document type name that matches the type; may
            return <c>null</c> or empty string to not limit searches to a document type.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.IElasticMapping.GetFieldName(System.Type,System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the field name for the given member. Extending this allows you to change the
            mapping field names in the CLR to field names in Elasticsearch. Typically, these rules
            will need to match the serialization rules you use when storing your documents.
            </summary>
            <param name="type">The type used in the source query.</param>
            <param name="memberExpression">The member expression whose name is required.</param>
            <returns>Returns the Elasticsearch field name that matches the member.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.IElasticMapping.GetTypeSelectionCriteria(System.Type)">
            <summary>
            Gets criteria that can be used to find documents of a particular type. Will be used by
            ElasticLINQ when a query does not have any suitable Where or Query criteria, so that it
            can unambiguously select documents of the given type. Typically this should return an 
            ExistsCriteria for a field that's known to always have a value.
            </summary>
            <param name="type">The type that's being searched.</param>
            <returns>The criteria for selecting documents of this type.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.IElasticMapping.Materialize(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            Materialize the JObject hit object from Elasticsearch to a CLR object.
            </summary>
            <param name="sourceDocument">JSON source document.</param>
            <param name="sourceType">Type of CLR object to materialize to.</param>
            <returns>Freshly materialized CLR object version of the source document.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,ElasticLinq.Mapping.EnumFormat,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Mapping.ElasticMapping"/> class.
            </summary>
            <param name="camelCaseFieldNames">Pass <c>true</c> to automatically camel-case field names (for <see cref="M:ElasticLinq.Mapping.ElasticMapping.GetFieldName(System.Type,System.Reflection.MemberInfo)"/>).</param>
            <param name="camelCaseTypeNames">Pass <c>true</c> to automatically camel-case type names (for <see cref="M:ElasticLinq.Mapping.ElasticMapping.GetDocumentType(System.Type)"/>).</param>
            <param name="pluralizeTypeNames">Pass <c>true</c> to automatically pluralize type names (for <see cref="M:ElasticLinq.Mapping.ElasticMapping.GetDocumentType(System.Type)"/>).</param>
            <param name="lowerCaseAnalyzedFieldValues">Pass <c>true</c> to automatically convert field values to lower case (for <see cref="M:ElasticLinq.Mapping.ElasticMapping.FormatValue(System.Reflection.MemberInfo,System.Object)"/>).</param>
            <param name="enumFormat">Pass <c>EnumFormat.String</c> to format enums as strings or <c>EnumFormat.Integer</c> to use integers (defaults to string).</param>
            <param name="conversionCulture">The culture to use for the lower-casing, camel-casing, and pluralization operations. If <c>null</c>,
            uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</param>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.FormatValue(System.Reflection.MemberInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.GetFieldName(System.Type,System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.GetFieldName(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Get the Elasticsearch field name for a given member.
            </summary>
            <param name="type">The prefix to put in front of this field name, if the field is
            an ongoing part of the document search.</param>
            <param name="memberInfo">The member whose field name is required.</param>
            <returns>The Elasticsearch field name that matches the member.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.GetMemberName(System.Reflection.MemberInfo)">
            <summary>
            Get the name of the member to be used as a field name.
            </summary>
            <param name="memberInfo">The member whose field name is required.</param>
            <returns>Name of the member to be used as a field name.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.GetDocumentType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.GetTypeSelectionCriteria(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.IsNotAnalyzed(System.Reflection.MemberInfo)">
            <summary>
            Determine whether a field is "not analyzed". By default, looks for the member to be
            decorated with the <see cref="T:ElasticLinq.NotAnalyzedAttribute"/>.
            </summary>
            <param name="member">The member to evaluate.</param>
            <returns>Returns <c>true</c> if the field is not analyzed; <c>false</c>, otherwise.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticMapping.Materialize(Newtonsoft.Json.Linq.JToken,System.Type)">
            <inheritedDoc />
        </member>
        <member name="M:ElasticLinq.Mapping.CouchbaseElasticMapping.#ctor(System.Boolean,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Mapping.CouchbaseElasticMapping"/> class.
            </summary>
            <param name="camelCaseFieldNames">Pass <c>true</c> to automatically camel-case field names (for <see cref="M:ElasticLinq.Mapping.ElasticMapping.GetFieldName(System.Type,System.Reflection.MemberInfo)"/>).</param>
            <param name="lowerCaseAnalyzedFieldValues">Pass <c>true</c> to automatically convert field values to lower case (for <see cref="M:ElasticLinq.Mapping.ElasticMapping.FormatValue(System.Reflection.MemberInfo,System.Object)"/>).</param>
            <param name="conversionCulture">The culture to use for the lower-casing, camel-casing, and pluralization operations. If <c>null</c>,
            uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</param>
        </member>
        <member name="M:ElasticLinq.Mapping.CouchbaseElasticMapping.GetDocumentMappingPrefix(System.Type)">
            <summary>
            Gets the fully document prefix for a given CLR type. Extending this allows you to change
            the mapping of types names into the prefix used when creating Elasticsearch queries against
            fields. For example, using the Couchbase/Elasticsearch adapter yield documents with the
            prefix "doc", since it wraps all documents into a "doc" object; similarly, developers may
            with to "namespace" Elasticsearch documents when using its auto-schema system,
            to prevent type collisions between field with the same name but different document type.
            </summary>
            <param name="type">The type whose prefix is required.</param>
            <returns>Returns the document prefix; may return <c>null</c> or empty string to
            indicate that no document prefix is required to search the documents.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.CouchbaseElasticMapping.GetDocumentType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.CouchbaseElasticMapping.GetFieldName(System.Type,System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.CouchbaseElasticMapping.GetFieldName(System.Type,System.Reflection.MemberInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.CouchbaseElasticMapping.GetTypeSelectionCriteria(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.CouchbaseElasticMapping.Materialize(Newtonsoft.Json.Linq.JToken,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Mapping.ElasticFieldsMappingWrapper">
            <summary>
            Wraps an elastic mapping with one that also handles the built-in
            ElasticFields class that contains properties for _score etc.
            </summary>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticFieldsMappingWrapper.#ctor(ElasticLinq.Mapping.IElasticMapping)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticFieldsMappingWrapper.FormatValue(System.Reflection.MemberInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticFieldsMappingWrapper.GetDocumentType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticFieldsMappingWrapper.GetFieldName(System.Type,System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticFieldsMappingWrapper.GetTypeSelectionCriteria(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Mapping.ElasticFieldsMappingWrapper.Materialize(Newtonsoft.Json.Linq.JToken,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Mapping.EnumFormat">
            <summary>
            How an enum should be formatted in the JSON payload.
            </summary>
        </member>
        <member name="F:ElasticLinq.Mapping.EnumFormat.Integer">
            <summary>
            Format enums as an integer using their ordinal.
            </summary>
        </member>
        <member name="F:ElasticLinq.Mapping.EnumFormat.String">
            <summary>
            Format enums as a string using their name.
            </summary>
        </member>
        <member name="T:ElasticLinq.Mapping.MappingHelpers">
            <summary>
            Common techniques for re-mapping names used between the various mappings.
            </summary>
        </member>
        <member name="M:ElasticLinq.Mapping.MappingHelpers.ToCamelCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Convert a string to camel-case.
            </summary>
            <param name="value">Input string to be camel-cased.</param>
            <param name="culture">CultureInfo to be used to lower-case first character.</param>
            <returns>String that has been converted to camel-case.</returns>
        </member>
        <member name="M:ElasticLinq.Mapping.MappingHelpers.ToPlural(System.String,System.Globalization.CultureInfo)">
            <summary>
            Pluralize a string.
            </summary>
            <param name="value">Input string to be pluralized.</param>
            <param name="culture">Culture to be used in pluralization.</param>
            <returns>String that has been pluralized.</returns>
            <remarks>
            This is a dumb implementation that doesn't even handle English correctly.
            </remarks>
        </member>
        <member name="M:ElasticLinq.Mapping.MappingHelpers.GetTypeSelectionProperty(System.Type)">
            <summary>
            Find a property on the given type that is suitable for identifying
            documents belong to this type within Elasticsearch.
            </summary>
            <param name="type">Type to examine for a suitable property.</param>
            <returns>PropertyInfo for a suitable property to use as a type selector or null if none are available.</returns>
            <remarks>
            A type selection property should be a public read/write instance property that is not generic.
            </remarks>
        </member>
        <member name="F:ElasticLinq.Mapping.MappingHelpers.BasicTypeSelectionPropertyCriteria">
            <summary>
            Determine if a property is suitable to use as a type selector.
            </summary>
            <remarks>
            A type selection property should be a public read/write instance property that is not generic.
            </remarks>
        </member>
        <member name="F:ElasticLinq.Mapping.MappingHelpers.RequiredProperty">
            <summary>
            Find the first property of a class that has a 'Required' attribute.
            </summary>
            <remarks>
            This is likely System.ComponentModel.DataAnnotations.RequiredAttribute but doesn't have to be.
            </remarks>
        </member>
        <member name="T:ElasticLinq.Mapping.TrivialElasticMapping">
            <summary>
            Trivial mapping implementation that will pluralize type names, camel-case
            type names and field names, and lowercase field values.
            </summary>
        </member>
        <member name="M:ElasticLinq.Mapping.TrivialElasticMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Mapping.TrivialElasticMapping"/> class.
            </summary>
        </member>
        <member name="T:ElasticLinq.NotAnalyzedAttribute">
            <summary>
            Used to mark serialized fields as being "not analayzed" in Elasticsearch
            (and therefore not subject to value transformations like lower-casing).
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.AndCriteria">
            <summary>
            Specifies that all subcriteria must be satisfied.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.CompoundCriteria">
            <summary>
            Base class for any criteria wanting to have criteria of its
            own such as AndCriteria and OrCriteria.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.ICriteria">
            <summary>
            Interface that all criteria must implement to be part of
            the query filter tree.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.ICriteria.Name">
            <summary>
            Name of this criteria as specified in the Elasticsearch DSL.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.CompoundCriteria.#ctor(System.Collections.Generic.IEnumerable{ElasticLinq.Request.Criteria.ICriteria})">
            <summary>
            Create a criteria that has subcriteria. The exact semantics of
            the subcriteria are controlled by subclasses of CompoundCriteria.
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.CompoundCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.CompoundCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.CompoundCriteria.Criteria">
            <summary>
            Criteria that is compounded by this criteria in some way (as determined by the subclass).
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.AndCriteria.#ctor(ElasticLinq.Request.Criteria.ICriteria[])">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.AndCriteria"/> class.
            </summary>
            <param name="criteria">Criteria to combine with 'and' semantics.</param>
            <remarks>Consider using <see cref="M:ElasticLinq.Request.Criteria.AndCriteria.Combine(ElasticLinq.Request.Criteria.ICriteria[])"/> instead.</remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.AndCriteria.Combine(ElasticLinq.Request.Criteria.ICriteria[])">
            <summary>
            Combine a number of <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> with 'and' semantics.
            </summary>
            <param name="criteria">The <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> to be combined.</param>
            <returns><see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> representing the original passed <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> with 'and' semantics.</returns>
            <remarks>This is usually an <see cref="T:ElasticLinq.Request.Criteria.AndCriteria"/> but might not be if the passed criteria can be collapsed into
            a single criteria.</remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.AndCriteria.CombineRanges(System.Collections.Generic.ICollection{ElasticLinq.Request.Criteria.ICriteria})">
            <summary>
            Combine range criteria for the same field into an upper-lower range for that criteria.
            </summary>
            <param name="criteria">Collection of <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> to have ranges combined.</param>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.AndCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.BoolCriteria">
            <summary>
            Specifies subcriteria to be satisfied as must (and), should (or) and must_not (none).
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.BoolCriteria.#ctor(System.Collections.Generic.IEnumerable{ElasticLinq.Request.Criteria.ICriteria},System.Collections.Generic.IEnumerable{ElasticLinq.Request.Criteria.ICriteria},System.Collections.Generic.IEnumerable{ElasticLinq.Request.Criteria.ICriteria})">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.BoolCriteria"/> class.
            </summary>
            <param name="must">Criteria that <b>must</b> be satisfied for this bool criteria to be satisfied.</param>
            <param name="should">Criteria that <b>should</b> be satisfied for this bool criteria to be satisfied.</param>
            <param name="mustNot">Criteria that <b>must not</b> be satisfied for this bool criteria to be satisfied.</param>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.BoolCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.BoolCriteria.Must">
            <summary>
            Criteria that must be satisfied for this bool criteria to be satisfied.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.BoolCriteria.Should">
            <summary>
            Criteria that should be satisfied for this bool criteria to be satisfied.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.BoolCriteria.MustNot">
            <summary>
            Criteria that must not be satisfied for this bool criteria to be satisfied.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.ConstantCriteria">
            <summary>
            Represents placeholders for constant values in the criteria tree until they
            can be reduced by <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteriaFilterReducer"/>.
            </summary>
            <remarks>
            These are generated by constant expressions within Where or Query clauses.
            </remarks>
        </member>
        <member name="F:ElasticLinq.Request.Criteria.ConstantCriteria.False">
            <summary>
            The <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/> that represents <c>false</c>.
            </summary>
        </member>
        <member name="F:ElasticLinq.Request.Criteria.ConstantCriteria.True">
            <summary>
            The <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/> that represents <c>true</c>.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.ConstantCriteria.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/> class.
            </summary>
            <param name="constantValue">Constant value to be represented by this criteria.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.ConstantCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.ConstantCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.ConstantCriteriaFilterReducer">
            <summary>
            Reduces <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/> within criteria recursively.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.ConstantCriteriaFilterReducer.Reduce(ElasticLinq.Request.Criteria.ICriteria)">
            <summary>
            Reduce a <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> that might contain a <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/>.
            </summary>
            <param name="criteria">Criteria to be reduced.</param>
            <returns>Reduced criteria.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.ConstantCriteriaFilterReducer.Reduce(ElasticLinq.Request.Criteria.AndCriteria)">
            <summary>
            Reduce a <see cref="T:ElasticLinq.Request.Criteria.AndCriteria"/> that might contain a <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/>.
            </summary>
            <param name="andCriteria"><see cref="T:ElasticLinq.Request.Criteria.AndCriteria"/> to be reduced.</param>
            <returns>Reduced criteria.</returns>
            <remarks>
            Trues will be removed, falses will replace the entire And with a false.
            </remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.ConstantCriteriaFilterReducer.Reduce(ElasticLinq.Request.Criteria.OrCriteria)">
            <summary>
            Reduce an <see cref="T:ElasticLinq.Request.Criteria.OrCriteria"/> that might contain a <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/>.
            </summary>
            <param name="orCriteria"><see cref="T:ElasticLinq.Request.Criteria.OrCriteria"/> to be reduced.</param>
            <returns>Reduced criteria.</returns>
            <remarks>
            Falses will be removed, trues will replace the entire Or with a true.
            </remarks>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.ExistsCriteria">
            <summary>
            Criteria that selects documents if they have any value
            in the specified field.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.SingleFieldCriteria">
            <summary>
            Base class for any criteria that maps to a single field.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.SingleFieldCriteria.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.SingleFieldCriteria"/> class.
            </summary>
            <param name="field">Field this criteria applies to.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.SingleFieldCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.SingleFieldCriteria.Field">
            <summary>
            Field this criteria applies to.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.SingleFieldCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.INegatableCriteria">
            <summary>
            Interface a criteria may optionally support if it knows of a way to 
            negate its effects without being wrapped in a NotCriteria.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.INegatableCriteria.Negate">
            <summary>
            Provide a negative representation of this criteria.
            </summary>
            <returns>Negative represenation of this criteria.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.ExistsCriteria.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.ExistsCriteria"/> class.
            </summary>
            <param name="field">Field that must exist for this criteria to be satisfied.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.ExistsCriteria.Negate">
            <summary>
            Negate this Exists criteria by turning it into a Missing criteria.
            </summary>
            <returns>Missing criteria for this field.</returns>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.ExistsCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.ITermsCriteria">
            <summary>
            Interface implemented by <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> and <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/> so that they can be
            treated homogeneously.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.ITermsCriteria.Field">
            <summary>
            Gets the field to be searched.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.ITermsCriteria.IsOrCriteria">
            <summary>
            Gets a value that indicates whether this criteria is an "or" style criteria.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.ITermsCriteria.Member">
            <summary>
            Gets the member that this criteria is searching.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.ITermsCriteria.Values">
            <summary>
            Gets the list of values to be searched for.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.MatchAllCriteria">
            <summary>
            Criteria that will match all documents.
            </summary>
        </member>
        <member name="F:ElasticLinq.Request.Criteria.MatchAllCriteria.Instance">
            <summary>
            Get the single instance of the <see cref="T:ElasticLinq.Request.Criteria.MatchAllCriteria"/> class.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.MatchAllCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.MissingCriteria">
            <summary>
            Criteria to select documents if they do not have a value
            in the specified field.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.MissingCriteria.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.MissingCriteria"/> class.
            </summary>
            <param name="field">Field that must be missing for this criteria to be satisfied.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.MissingCriteria.Negate">
            <summary>
            Negate this Missing criteria by turning it into an Exists criteria.
            </summary>
            <returns>Exists criteria for this field.</returns>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.MissingCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.NotCriteria">
            <summary>
            Criteria that inverts the logic of criteria it contains.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.NotCriteria.Create(ElasticLinq.Request.Criteria.ICriteria)">
            <summary>
            Create a negated version of the criteria supplied.
            </summary>
            <param name="criteria"><see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> to be negated.</param>
            <returns><see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> that is a negated version of the criteria supplied.</returns>
            <remarks>
            If the criteria supplied supports <see cref="T:ElasticLinq.Request.Criteria.INegatableCriteria"/> then it will be asked
            to provide its own negation, e.g. <see cref="T:ElasticLinq.Request.Criteria.MissingCriteria"/> becomes <see cref="T:ElasticLinq.Request.Criteria.ExistsCriteria"/>
            otherwise it will be wrapped in a <see cref="T:ElasticLinq.Request.Criteria.NotCriteria"/>.
            </remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.NotCriteria.#ctor(ElasticLinq.Request.Criteria.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.NotCriteria"/> class.
            </summary>
            <param name="criteria">Criteria to be negated.</param>
            <remarks>
            Consider using <see cref="M:ElasticLinq.Request.Criteria.NotCriteria.Create(ElasticLinq.Request.Criteria.ICriteria)"/> instead as there may be a simpler
            representation of the criteria if it supports negation.
            </remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.NotCriteria.Negate">
            <summary>
            Negate this <see cref="T:ElasticLinq.Request.Criteria.NotCriteria"/> by returning the criteria it is wrapping.
            </summary>
            <returns>Inner criteria no longer wrapped with Not.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.NotCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.NotCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.NotCriteria.Criteria">
            <summary>
            <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> that is being negated.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.OrCriteria">
            <summary>
            Criteria that requires one of the criteria to be
            satisfied in order to select the document.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.OrCriteria.#ctor(ElasticLinq.Request.Criteria.ICriteria[])">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.OrCriteria"/> class.
            </summary>
            <param name="criteria">Criteria to combine with 'or' semantics.</param>
            <remarks>Consider using <see cref="M:ElasticLinq.Request.Criteria.OrCriteria.Combine(ElasticLinq.Request.Criteria.ICriteria[])"/> instead.</remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.OrCriteria.Combine(ElasticLinq.Request.Criteria.ICriteria[])">
            <summary>
            Combine a number of <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> with 'or' semantics.
            </summary>
            <param name="criteria">The <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> to be combined.</param>
            <returns><see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> representing the original passed <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> with 'or' semantics.</returns>
            <remarks>This is usually an <see cref="T:ElasticLinq.Request.Criteria.OrCriteria"/> but might not be if the passed criteria can be collapsed into
            a single criteria.</remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.OrCriteria.FlattenOrCriteria(System.Collections.Generic.IEnumerable{ElasticLinq.Request.Criteria.ICriteria})">
            <summary>
            Flatten a tree of nested <see cref="T:ElasticLinq.Request.Criteria.OrCriteria"/> into a single <see cref="T:ElasticLinq.Request.Criteria.OrCriteria"/>.
            </summary>
            <param name="criteria">List of <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> to be flattened.</param>
            <returns>Flattened list of <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/>.</returns>
            <remarks>
            This is necessary as the compiler-generated unary expression tree appears as ((a || b) || c).
            We we would like the simpler form that looks more like the original source of (a || b || c).
            </remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.OrCriteria.CombineTermsForSameField(System.Collections.Generic.ICollection{ElasticLinq.Request.Criteria.ICriteria})">
            <summary>
            Takes a collection of <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> and if they are all 
            <see cref="T:ElasticLinq.Request.Criteria.ITermsCriteria"/> for the same field replaces them with a single
            <see cref="T:ElasticLinq.Request.Criteria.ITermsCriteria"/> containing all terms for that field.
            </summary>
            <param name="criteria">collection of <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> that might be combined.</param>
            <returns><see cref="T:ElasticLinq.Request.Criteria.ITermsCriteria"/> containing all terms for that field or null if they can not be combined.</returns>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.OrCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.PrefixCriteria">
            <summary>
            Criteria that specifies a specific field needs to start with a specific prefix.
            </summary>
            <remarks>
            This will only work on fields within Elasticsearch that are not analyzed as otherwise the
            keyword tokenizer will have removed any concept of a prefix.
            </remarks>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.PrefixCriteria.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.PrefixCriteria"/> class.
            </summary>
            <param name="field">Field to check the prefix of.</param>
            <param name="prefix">Prefix to check within this field.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.PrefixCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.PrefixCriteria.Prefix">
            <summary>
            Prefix to check the field begins with.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.PrefixCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.QueryCriteriaRewriter">
            <summary>
            Query DSL is slightly different from Filter DSL. In order to keep
            code paths simple we always build as if doing a filter. Here we
            rewrite the <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> designed for a filter into a query.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.QueryCriteriaRewriter.Compensate(ElasticLinq.Request.Criteria.ICriteria)">
            <summary>
            Take an <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> for filtering and return an <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/>
            with any necessary compensations for querying.
            </summary>
            <param name="criteria"><see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> built for filtering.</param>
            <returns><see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> built for querying.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.QueryCriteriaRewriter.Rewrite(ElasticLinq.Request.Criteria.NotCriteria)">
            <summary>
            Rewrite a <see cref="T:ElasticLinq.Request.Criteria.NotCriteria"/> as a <see cref="T:ElasticLinq.Request.Criteria.BoolCriteria"/>.
            </summary>
            <param name="not">NotCriteria to rewrite.</param>
            <returns><see cref="T:ElasticLinq.Request.Criteria.BoolCriteria"/> with the criteria from Not mapped into MustNot.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.QueryCriteriaRewriter.Rewrite(ElasticLinq.Request.Criteria.OrCriteria)">
            <summary>
            Rewrite an <see cref="T:ElasticLinq.Request.Criteria.OrCriteria"/> as a <see cref="T:ElasticLinq.Request.Criteria.BoolCriteria"/>.
            </summary>
            <param name="or"><see cref="T:ElasticLinq.Request.Criteria.OrCriteria"/> to rewrite.</param>
            <returns><see cref="T:ElasticLinq.Request.Criteria.BoolCriteria"/> with the criteria from the Or mapped into Should.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.QueryCriteriaRewriter.Rewrite(ElasticLinq.Request.Criteria.AndCriteria)">
            <summary>
            Rewrite an <see cref="T:ElasticLinq.Request.Criteria.AndCriteria"/> as a <see cref="T:ElasticLinq.Request.Criteria.BoolCriteria"/>.
            </summary>
            <param name="and"><see cref="T:ElasticLinq.Request.Criteria.AndCriteria"/> to rewrite.</param>
            <returns><see cref="T:ElasticLinq.Request.Criteria.BoolCriteria"/> with the criteria from the And mapped into Must.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.QueryCriteriaRewriter.Rewrite(ElasticLinq.Request.Criteria.ConstantCriteria)">
            <summary>
            Rewrite a <see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/> as a <see cref="T:ElasticLinq.Request.Criteria.MatchAllCriteria"/> that might be 
            wrapped in a <see cref="T:ElasticLinq.Request.Criteria.NotCriteria"/> depending on whether it is true or false respectively.
            </summary>
            <param name="constant"><see cref="T:ElasticLinq.Request.Criteria.ConstantCriteria"/> to rewrite.</param>
            <returns>
            <see cref="T:ElasticLinq.Request.Criteria.MatchAllCriteria"/> if true; otherwise a <see cref="T:ElasticLinq.Request.Criteria.MatchAllCriteria"/> 
            wrapped in a <see cref="T:ElasticLinq.Request.Criteria.NotCriteria"/> if false.
            </returns>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.QueryStringCriteria">
            <summary>
            Criteria that specifies a query string to be passed to Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.QueryStringCriteria.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.QueryStringCriteria"/> class.
            </summary>
            <param name="value">Value to be found within the fields.</param>
            <param name="fields">Colleciton of fields to be searched.</param>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.QueryStringCriteria.Fields">
            <summary>
            Collection of fields to be searched.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.QueryStringCriteria.Value">
            <summary>
            Value to be found within the fields.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.QueryStringCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.RangeCriteria">
            <summary>
            Criteria that specifies a range of desired values for a given
            field that need to be satisfied to select a document.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.RangeCriteria.#ctor(System.String,System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{ElasticLinq.Request.Criteria.RangeSpecificationCriteria})">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.RangeCriteria"/> class.
            </summary>
            <param name="field">Field that must be within the specified ranges.</param>
            <param name="member">Property or field that this range criteria applies to.</param>
            <param name="specifications">Specifications (upper and lower bounds) that must be met.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.RangeCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.RangeCriteria.SpecificationsCanBeCombined(System.Collections.Generic.List{ElasticLinq.Request.Criteria.RangeSpecificationCriteria})">
            <summary>
            Determine whether a list of <see cref="T:ElasticLinq.Request.Criteria.RangeSpecificationCriteria"/> can be combined or not.
            </summary>
            <param name="specifications">List of <see cref="T:ElasticLinq.Request.Criteria.RangeSpecificationCriteria"/>to be considered.</param>
            <returns><c>true</c> if they can be combined; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RangeCriteria.Member">
            <summary>
            Property or field that this range criteria applies to.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RangeCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RangeCriteria.Field">
            <summary>
            Field that must be within the specified ranges.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RangeCriteria.Specifications">
            <summary>
            Specifications (upper and lower bounds) that must be met.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.RangeComparison">
            <summary>
            Type of RangeComparison operations.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.RangeSpecificationCriteria.#ctor(ElasticLinq.Request.Criteria.RangeComparison,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.RangeSpecificationCriteria"/> class.
            </summary>
            <param name="comparison">Type of comparison for this range specification.</param>
            <param name="value">Constant value that this range specification tests against.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.RangeSpecificationCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RangeSpecificationCriteria.Comparison">
            <summary>
            Type of comparison for this range specification.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RangeSpecificationCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RangeSpecificationCriteria.Value">
            <summary>
            Constant value that this range specification tests against.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.RegexpCriteria">
            <summary>
            Criteria that specifies a regular expression must be matched against a field.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.RegexpCriteria.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.RegexpCriteria"/> class.
            </summary>
            <param name="field">Field to test the regex against.</param>
            <param name="regexp">Regular expression to test against the field.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.RegexpCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RegexpCriteria.Regexp">
            <summary>
            Regular expression (in Elasticsearch syntax) to test against the field.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.RegexpCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.TermCriteria">
            <summary>
            Criteria that specifies one possible value that a
            field must match in order to select a document.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.TermCriteria.#ctor(System.String,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> class.
            </summary>
            <param name="field">Field to be checked for this term.</param>
            <param name="member">Property or field being checked for this term.</param>
            <param name="value">Value to be checked for this term.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.TermCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.TermCriteria.Member">
            <summary>
            Property or field being checked for this term.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.TermCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.TermCriteria.Value">
            <summary>
            Constant value being checked.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.TermCriteria.ElasticLinq#Request#Criteria#ITermsCriteria#Values">
            <summary>
            List of constant values being checked for.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.TermsCriteria">
            <summary>
            Criteria that specifies one or more possible values that a
            field must match in order to select a document.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.TermsCriteria.#ctor(System.Nullable{ElasticLinq.Request.Criteria.TermsExecutionMode},System.String,System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/> class.
            </summary>
            <param name="executionMode">Type of execution mode this terms criteria will take.</param>
            <param name="field">Field to be checked for this term.</param>
            <param name="member">Property or field being checked for this term.</param>
            <param name="values">Constant values being searched for.</param>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.TermsCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.TermsCriteria.Build(System.String,System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Builds a <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> or <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/>, depending on how many values are
            present in the <paramref name="values"/> collection.
            </summary>
            <param name="field">The field that's being searched.</param>
            <param name="member">The member information for the field.</param>
            <param name="values">The values to be matched.</param>
            <returns>Either a <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> object or a <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/> object.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.TermsCriteria.Build(System.String,System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Builds a <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> or <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/>, depending on how many values are
            present in the <paramref name="values"/> collection.
            </summary>
            <param name="field">The field that's being searched.</param>
            <param name="member">The member information for the field.</param>
            <param name="values">The values to be matched.</param>
            <returns>Either a <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> object or a <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/> object.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.TermsCriteria.Build(System.Nullable{ElasticLinq.Request.Criteria.TermsExecutionMode},System.String,System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Builds a <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> or <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/>, depending on how many values are
            present in the <paramref name="values"/> collection.
            </summary>
            <param name="executionMode">The terms execution mode (optional). Only used when a <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/> is returned.</param>
            <param name="field">The field that's being searched.</param>
            <param name="member">The member information for the field.</param>
            <param name="values">The values to be matched.</param>
            <returns>Either a <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> object or a <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/> object.</returns>
        </member>
        <member name="M:ElasticLinq.Request.Criteria.TermsCriteria.Build(System.Nullable{ElasticLinq.Request.Criteria.TermsExecutionMode},System.String,System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Builds a <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> or <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/>, depending on how many values are
            present in the <paramref name="values"/> collection.
            </summary>
            <param name="executionMode">The terms execution mode (optional). Only used when a <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/> is returned.</param>
            <param name="field">The field that's being searched.</param>
            <param name="member">The member information for the field.</param>
            <param name="values">The values to be matched.</param>
            <returns>Either a <see cref="T:ElasticLinq.Request.Criteria.TermCriteria"/> object or a <see cref="T:ElasticLinq.Request.Criteria.TermsCriteria"/> object.</returns>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.TermsCriteria.ExecutionMode">
            <summary>
            Type of execution mode this terms criteria will take.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.TermsCriteria.Member">
            <summary>
            Property or field being checked for this term.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.TermsCriteria.Name">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Criteria.TermsCriteria.Values">
            <summary>
            Constant values being searched for.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Criteria.TermsExecutionMode">
            <summary>
            Which mode a terms criteria should be executed in.
            </summary>
            <remarks>
            See the Elasticsearch documentation for more details on how each term
            behaves differently.
            </remarks>
        </member>
        <member name="F:ElasticLinq.Request.Criteria.TermsExecutionMode.plain">
            <summary>
            Default mode using full iteration, caching and bit-set matching.
            </summary>
        </member>
        <member name="F:ElasticLinq.Request.Criteria.TermsExecutionMode.fielddata">
            <summary>
            Use the fielddata cache to compare terms but does not cache itself.
            </summary>
        </member>
        <member name="F:ElasticLinq.Request.Criteria.TermsExecutionMode.bool">
            <summary>
            Expand each term out into its own filter and wrap it in a bool filter.
            </summary>
        </member>
        <member name="F:ElasticLinq.Request.Criteria.TermsExecutionMode.and">
            <summary>
            Expand each term out into its own filter and wrap it in an and filter.
            </summary>
        </member>
        <member name="F:ElasticLinq.Request.Criteria.TermsExecutionMode.or">
            <summary>
            Expand each term out into its own filter and wrap it in an or filter.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.ElasticRequestProcessor">
            <summary>
            Sends Elasticsearch requests via HTTP and ensures materialization of the response.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Expressions.CriteriaExpression">
            <summary>
            An expression tree node that represents criteria.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Expressions.CriteriaExpression.#ctor(ElasticLinq.Request.Criteria.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Expressions.CriteriaExpression"/> class.
            </summary>
            <param name="criteria"><see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> to represent with this expression.</param>
        </member>
        <member name="M:ElasticLinq.Request.Expressions.CriteriaExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Expressions.CriteriaExpression.Criteria">
            <summary>
            <see cref="T:ElasticLinq.Request.Criteria.ICriteria"/> that is represented by this expression.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Expressions.CriteriaExpression.NodeType">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Expressions.CriteriaExpression.Type">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Expressions.CriteriaExpression.CanReduce">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Expressions.ElasticExpressionType">
            <summary>
            List of expression type constant numeric values used by ElasticLINQ.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Expressions.FacetExpression">
            <summary>
            An expression tree node that represents an Elasticsearch facet.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Expressions.FacetExpression.#ctor(ElasticLinq.Request.Facets.IFacet)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Request.Expressions.FacetExpression"/> class.
            </summary>
            <param name="facet"><see cref="T:ElasticLinq.Request.Facets.IFacet"/> to represent with this expression.</param>
        </member>
        <member name="M:ElasticLinq.Request.Expressions.FacetExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Expressions.FacetExpression.Facet">
            <summary>
            <see cref="T:ElasticLinq.Request.Facets.IFacet"/> that is represented by this expression.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Expressions.FacetExpression.NodeType">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Expressions.FacetExpression.Type">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Request.Expressions.FacetExpression.CanReduce">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Request.Facets.FilterFacet">
            <summary>
            Represents a filter facet.
            Filter facets return the number of documents that  match the specified filter criteria.
            </summary>
            <remarks>Mapped to .GroupBy(a => 1).Select(a => a.Sum(b => b.Field))</remarks>
        </member>
        <member name="T:ElasticLinq.Request.Facets.IFacet">
            <summary>
            Interface that all facets must implement to be part of
            the query facet tree.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Facets.IFacet.Name">
            <summary>
            Name of this facet as specified in the Elasticsearch DSL
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Facets.IFacet.Type">
            <summary>
            Type of this facet as specified in the Elasticsearch DSL
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Facets.IFacet.Filter">
            <summary>
            Criteria of this facet
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Facets.IOrderableFacet">
            <summary>
            Interface that all orderable facets must implement to be part of
            the query facet tree.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Facets.IOrderableFacet.Size">
            <summary>
            Defines how many top terms should be returned out of the overall terms list
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Facets.StatisticalFacet">
            <summary>
            Represents a stastical facet.
            Statistical facets return all statistical information such
            as counts, sums, mean etc. for a given number of fields
            within the documents specified by the filter criteria.
            </summary>
            <remarks>Mapped to .GroupBy(a => 1).Select(a => a.Count(b => b.SomeField))</remarks>
        </member>
        <member name="T:ElasticLinq.Request.Facets.TermsFacet">
            <summary>
            Represents a terms facet.
            Terms facets return count information for terms.
            </summary>
            <remarks>Mapped to .GroupBy(a => a.Something).Select(a => a.Count())</remarks>
        </member>
        <member name="T:ElasticLinq.Request.Facets.TermsStatsFacet">
            <summary>
            Represents a terms_stats facet.
            Terms_stats facets return all statistical information for
            a given field broken down by a term. 
            </summary>
            <remarks>Mapped to .GroupBy(a => a.Term).Select(a => a.Sum(b => b.Field))</remarks>
        </member>
        <member name="T:ElasticLinq.Request.Formatters.SearchRequestFormatter">
            <summary>
            Formats a SearchRequest into a JSON POST to be sent to Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Formatters.SearchRequestFormatter.#ctor(ElasticLinq.IElasticConnection,ElasticLinq.Mapping.IElasticMapping,ElasticLinq.Request.SearchRequest)">
            <summary>
            Create a new SearchRequestFormatter for the given connection, mapping and search request.
            </summary>
            <param name="connection">The ElasticConnection to prepare the SearchRequest for.</param>
            <param name="mapping">The IElasticMapping used to format the SearchRequest.</param>
            <param name="searchRequest">The SearchRequest to be formatted.</param>
        </member>
        <member name="M:ElasticLinq.Request.Formatters.SearchRequestFormatter.CreateBody">
            <summary>
            Create the Json HTTP request body for this request given the search query and connection.
            </summary>
            <returns>Json to be used to execute this query by Elasticsearch.</returns>
        </member>
        <member name="P:ElasticLinq.Request.Formatters.SearchRequestFormatter.Body">
            <summary>
            The JSON formatted POST body for the request to be sent to Elasticsearch.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Highlight">
            <summary>
            Specifies highlighting of search results for one or more fields.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.Highlight.PreTag">
            <summary>
            The string to start the highlight of each word.
            </summary>
            <remarks>
            This is typically set to an opening HTML tag, hence the name.
            </remarks>
        </member>
        <member name="P:ElasticLinq.Request.Highlight.PostTag">
            <summary>
            The string to end the highlight of each word.
            </summary>
            <remarks>
            This is typically set to an closing HTML tag, hence the name.
            </remarks>
        </member>
        <member name="P:ElasticLinq.Request.Highlight.Fields">
            <summary>
            The fields highlighted by this request.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.QueryInfo">
            <summary>
            Provides information about a query to be sent to Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.QueryInfo.#ctor(System.String,System.Uri)">
            <summary>
            Create a new instance of the QueryInfo class with a given query and Uri.
            </summary>
            <param name="query">Query body to be sent to Elasticsearch.</param>
            <param name="uri">Uri to be used to send the query to Elasticsearch.</param>
        </member>
        <member name="P:ElasticLinq.Request.QueryInfo.Query">
            <summary>
            Query JSON body to be sent to Elasticsearch.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.QueryInfo.Uri">
            <summary>
            Uri to be used to send the query to Elasticsearch.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.SearchRequest">
            <summary>
            Represents a search request to be sent to Elasticsearch.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.SearchRequest.#ctor">
            <summary>
            Create a new SearchRequest.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.From">
            <summary>
            Index to start taking the Elasticsearch documents from.
            </summary>
            <remarks>Maps to the Skip statement of LINQ.</remarks>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.Size">
            <summary>
            Number of documents to return from Elasticsearch.
            </summary>
            <remarks>Maps to the Take statement of LINQ.</remarks>       
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.DocumentType">
            <summary>
            Type of documents to return from Elasticsearch.
            </summary>
            <remarks>Derived from the T specified in Query&lt;T&gt;.</remarks>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.Fields">
            <summary>
            List of fields to return for each document instead of the
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.SortOptions">
            <summary>
            Sort sequence for the documents. This affects From and Size.
            </summary>
            <remarks>Determined by the OrderBy/ThenBy LINQ statements.</remarks>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.Filter">
            <summary>
            Filter criteria for the documents.
            </summary>
            <remarks>Determined by the Where LINQ statements.</remarks>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.Query">
            <summary>
            Query criteria for the documents.
            </summary>
            <remarks>Determined by the Query extension methods.</remarks>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.Facets">
            <summary>
            Facet aggregations and statistical inform that should be included.
            </summary>
            <remarks>Determined by the GroupBy/Count/Sum/Average statements of LINQ.</remarks>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.SearchType">
            <summary>
            Type of search Elasticsearch should perform.
            </summary>
            <remarks>Is usually blank but can be set to Count when facets are required instead of hits.</remarks>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.MinScore">
            <summary>
            Minimum score of results to be returned.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.SearchRequest.Highlight">
            <summary>
            Specify the highlighting to be applied to the results.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.SortOption">
            <summary>
            Specifies the options desired for sorting by an individual field.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.SortOption.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a new SortOption for the given name, order and ignore.
            </summary>
            <param name="name">Name of the field to sort by.</param>
            <param name="ascending">True if this field should be in ascending order; false otherwise.</param>
            <param name="ignoreUnmapped">Whether unmapped fields should be ignored or not.</param>
        </member>
        <member name="P:ElasticLinq.Request.SortOption.Name">
            <summary>
            Name of the field to be sorted.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.SortOption.Ascending">
            <summary>
            Whether this field should be sorted in ascending order or not.
            </summary>
        </member>
        <member name="P:ElasticLinq.Request.SortOption.IgnoreUnmapped">
            <summary>
            Whether documents with unmapped fields should be ignored or not.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.BranchSelectExpressionVisitor">
            <summary>
            Tests expressions to find interesting branches of the tree.
            Can be used for things like finding candidates for partial evaluation.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.ConstantMemberPair">
            <summary>
            A pair containing one MemberExpression and one ConstantExpression that might be used
            in a test or assignment.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.CriteriaExpressionVisitor">
            <summary>
            Expression visitor to translate predicate expressions to criteria expressions.
            Used by Where, Query, Single, First, Count etc.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Visitors.CriteriaExpressionVisitor.#ctor(ElasticLinq.Mapping.IElasticMapping,System.Type)">
            <summary>
            Creates a new CriteriaExpressionVisitor with a given mapping and prefix.
            </summary>
            <param name="mapping">The IElasticMapping used to translate properties to fields.</param>
            <param name="sourceType">The string prefix used to prepend fields</param>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.ElasticFieldsExpressionVisitor">
            <summary>
            Expression visitor that substitutes references to <see cref="T:ElasticLinq.ElasticFields"/>
            with the desired underlying special reserved name.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.ElasticQueryTranslator">
            <summary>
            Expression visitor to translate a LINQ query into a <see cref="T:ElasticLinq.Request.Visitors.ElasticTranslateResult"/>
            that captures remote and local semantics.
            </summary>
        </member>
        <member name="M:ElasticLinq.Request.Visitors.ElasticQueryTranslator.RebindElasticFieldsAndChainProjector(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            We are using the whole entity in a new select projection. Re-bind any ElasticField references to JObject
            and ensure the entity parameter is a freshly materialized entity object from our default materializer.
            </summary>
            <param name="selectExpression">Select expression to re-bind.</param>
            <param name="entityParameter">Parameter that references the whole entity.</param>
        </member>
        <member name="M:ElasticLinq.Request.Visitors.ElasticQueryTranslator.RebindPropertiesAndElasticFields(System.Linq.Expressions.Expression)">
            <summary>
            We are using just some properties of the entity. Rewrite the properties as JObject field lookups and
            record all the field names used to ensure we only select those.
            </summary>
            <param name="selectExpression">Select expression to re-bind.</param>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.ElasticTranslateResult">
            <summary>
            Represents the result of a translated query including the
            remote <see cref="T:ElasticLinq.Request.SearchRequest"/> to select the data
            and the local <see cref="T:ElasticLinq.Response.Materializers.IElasticMaterializer"/> necessary to
            instantiate objects.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.EvaluatingExpressionVisitor">
            <summary>
            Visits the expression tree and for any node in its list
            replaces that expression with a constant expression
            that resulted from its compilation and invocation.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.FacetExpressionVisitor">
            <summary>
            Gathers and rebinds aggregate operations into facets.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.MemberProjectionExpressionVisitor">
            <summary>
            Rebinds select projection entity member accesses to JObject fields
            recording the specific field names required for selection.
            </summary>
        </member>
        <member name="T:ElasticLinq.Request.Visitors.PartialEvaluator">
            <summary>
            Determines which part of the tree can be locally
            evaluated before execution and substitutes those parts
            with constant values obtained from local execution of that part.
            </summary>
        </member>
        <member name="T:ElasticLinq.Response.Materializers.AnyElasticMaterializer">
            <summary>
            Materializes true or false depending on whether any results matched the query or not.
            </summary>
        </member>
        <member name="T:ElasticLinq.Response.Materializers.IElasticMaterializer">
            <summary>
            Interface for all materializers responsible for turning the ElasticResponse into desired
            CLR objects.
            </summary>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.IElasticMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Materialize the ElasticResponse into the desired CLR objects.
            </summary>
            <param name="response">The <see cref="T:ElasticLinq.Response.Model.ElasticResponse"/> received from Elasticsearch.</param>
            <returns>List or a single CLR object as requested.</returns>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.AnyElasticMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Determine whether at a given query response contains any hits.
            </summary>
            <param name="response">The <see cref="T:ElasticLinq.Response.Model.ElasticResponse"/> to check for emptiness.</param>
            <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ChainMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Process response, then translate it to next materializer.
            </summary>
            <param name="response">ElasticResponse to obtain the existence of a result.</param>
            <returns>Return result of previous materializer, previously processed by self</returns>
        </member>
        <member name="T:ElasticLinq.Response.Materializers.CountElasticMaterializer">
            <summary>
            Materializes a count operation by obtaining the total hits from the response.
            </summary>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.CountElasticMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Materialize the result count for a given response.
            </summary>
            <param name="response">The <see cref="T:ElasticLinq.Response.Model.ElasticResponse"/> to obtain the count value from.</param>
            <returns>The ewaulr count expressed as either an int or long depending on the size of the count.</returns>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.HighlightElasticMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Add to response fields that needs to read highlighted info.
            </summary>
            <param name="response">ElasticResponse to obtain the existence of a result.</param>
            <returns>Return result of next materializer</returns>
        </member>
        <member name="T:ElasticLinq.Response.Materializers.ListHitsElasticMaterializer">
            <summary>
            Materializes multiple hits into a list of CLR objects.
            </summary>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListHitsElasticMaterializer.#ctor(System.Func{ElasticLinq.Response.Model.Hit,System.Object},System.Type)">
            <summary>
            Create an instance of the ListHitsElasticMaterializer with the given parameters.
            </summary>
            <param name="projector">A function to turn a hit into a desired CLR object.</param>
            <param name="elementType">The type of CLR object being materialized.</param>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListHitsElasticMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Materialize the hits from the response into desired CLR objects.
            </summary>
            <param name="response">The <see cref="T:ElasticLinq.Response.Model.ElasticResponse"/> containing the hits to materialize.</param>
            <returns>List of <see cref="F:ElasticLinq.Response.Materializers.ListHitsElasticMaterializer.elementType"/> objects as constructed by the <see cref="F:ElasticLinq.Response.Materializers.ListHitsElasticMaterializer.projector"/>.</returns>
        </member>
        <member name="T:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer">
            <summary>
            Materializes facets with their terms from the response.
            </summary>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer.#ctor(System.Func{ElasticLinq.Response.Materializers.AggregateRow,System.Object},System.Type,System.Type)">
            <summary>
            Create an instance of the <see cref="T:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer"/> with the given parameters.
            </summary>
            <param name="projector">A function to turn a hit into a desired object.</param>
            <param name="elementType">The type of object being materialized.</param>
            <param name="groupKeyType">The type of the term/group key field.</param>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Materialize the facets from an response into a list of objects.
            </summary>
            <param name="response">The <see cref="T:ElasticLinq.Response.Model.ElasticResponse"/> containing the facets to materialize.</param>
            <returns>List of <see cref="F:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer.elementType"/> objects with these facets projected onto them.</returns>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer.Many``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Given a JObject of facets in an Elasticsearch structure materialize them as
            objects of type <typeparamref name="T"/> as created by the <see cref="F:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer.projector"/>.
            </summary>
            <typeparam name="T">Type of objects to be materialized.</typeparam>
            <param name="facets">Elasticsearch formatted list of facets.</param>
            <returns>List of materialized <typeparamref name="T"/> objects.</returns>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer.FlattenTermsToAggregateRows(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            terms_stats and terms facet responses have each field in an independent object with all 
            possible operations for that field. Multiple fields means multiple objects
            each of which might not have all possible terms. Convert that structure into
            an SQL-style row with one term per row containing each aggregate field and operation combination.
            </summary>
            <param name="termsStats">Facets of type terms or terms_stats.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing keys and fields representing 
            the terms and statistics.</returns>
        </member>
        <member name="P:ElasticLinq.Response.Materializers.ListTermFacetsElasticMaterializer.ElementType">
            <summary>
            Type of element being materialized.
            </summary>
        </member>
        <member name="T:ElasticLinq.Response.Materializers.ListTermlessFacetsElasticMaterializer">
            <summary>
            Materializes a list containing a single termless facet.
            </summary>
        </member>
        <member name="T:ElasticLinq.Response.Materializers.TermlessFacetElasticMaterializer">
            <summary>
            Materializes a single termless facet from the response.
            </summary>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.TermlessFacetElasticMaterializer.#ctor(System.Func{ElasticLinq.Response.Materializers.AggregateRow,System.Object},System.Type,System.Object)">
            <summary>
            Create an instance of the <see cref="T:ElasticLinq.Response.Materializers.TermlessFacetElasticMaterializer"/> with the given parameters.
            </summary>
            <param name="projector">A function to turn a hit into a desired object.</param>
            <param name="elementType">The type of object being materialized.</param>
            <param name="key">The constant value for any key references during materialization.</param>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.TermlessFacetElasticMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Materialize a single object from the response using the <see cref="F:ElasticLinq.Response.Materializers.TermlessFacetElasticMaterializer.projector"/>
             or return a default value based on the element type.
            </summary>
            <param name="response">The <see cref="T:ElasticLinq.Response.Model.ElasticResponse"/> to materialize facets from.</param>
            <returns>Object materialized from the response using the projector or default if no corresponding facets.</returns>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.TermlessFacetElasticMaterializer.MaterializeSingle(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Materialize a single object from the response using the <see cref="F:ElasticLinq.Response.Materializers.TermlessFacetElasticMaterializer.projector"/>
            or return null if there are no applicable facets.
            </summary>
            <param name="response">The <see cref="T:ElasticLinq.Response.Model.ElasticResponse"/> to materialize facets from.</param>
            <returns>Object materialized from the response using the projector or null if no corresponding facets.</returns>
        </member>
        <member name="P:ElasticLinq.Response.Materializers.TermlessFacetElasticMaterializer.ElementType">
            <summary>
            Type of element being materialized.
            </summary>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListTermlessFacetsElasticMaterializer.#ctor(System.Func{ElasticLinq.Response.Materializers.AggregateRow,System.Object},System.Type,System.Object)">
            <summary>
            Create an instance of the ListTermlessFacetsElasticMaterializer with the given parameters.
            </summary>
            <param name="projector">A function to turn a hit into a desired object.</param>
            <param name="elementType">The type of object being materialized.</param>
            <param name="key">The constant value for any key references during materialization.</param>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListTermlessFacetsElasticMaterializer.Materialize(ElasticLinq.Response.Model.ElasticResponse)">
            <summary>
            Materialize the facets from an response into a List with a single object as determined
            by the projector.
            </summary>
            <param name="response">The <see cref="T:ElasticLinq.Response.Model.ElasticResponse"/> to obtain the facets from.</param>
            <returns>List containing a single object with these facets projected onto them.</returns>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.ListTermlessFacetsElasticMaterializer.Many``1(``0)">
            <summary>
            Converts a single item into a generic list containing that item.
            </summary>
            <typeparam name="T">Type of the item and corresponding type of list.</typeparam>
            <param name="item">Item to be included in the new list.</param>
            <returns>New list containing just the item.</returns>
        </member>
        <member name="T:ElasticLinq.Response.Materializers.OneHitElasticMaterializer">
            <summary>
            Materializes one hit into a CLR object throwing necessary exceptions as required to ensure First/Single semantics.
            </summary>
        </member>
        <member name="M:ElasticLinq.Response.Materializers.OneHitElasticMaterializer.#ctor(System.Func{ElasticLinq.Response.Model.Hit,System.Object},System.Type,System.Boolean,System.Boolean)">
            <summary>
            Create an instance of the OneHitElasticMaterializer with the given parameters.
            </summary>
            <param name="projector">A function to turn a hit into a desired CLR object.</param>
            <param name="elementType">The type of CLR object being materialized.</param>
            <param name="throwIfMoreThanOne">Whether to throw an InvalidOperationException if there are multiple hits.</param>
            <param name="defaultIfNone">Whether to throw an InvalidOperationException if there are no hits.</param>
        </member>
        <member name="T:ElasticLinq.Response.Model.ElasticResponse">
            <summary>
            A top-level response from Elasticsearch.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.ElasticResponse.took">
            <summary>
            How long the request took in milliseconds.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.ElasticResponse.timed_out">
            <summary>
            Whether this request timed out or not.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.ElasticResponse.hits">
            <summary>
            The search hits delivered in this response.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.ElasticResponse.error">
            <summary>
            The error received from Elasticsearch.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.ElasticResponse.facets">
            <summary>
            The facets delivered in this response.
            </summary>
        </member>
        <member name="T:ElasticLinq.Response.Model.Hit">
            <summary>
            An individual hit response from Elasticsearch.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hit._index">
            <summary>
            The index of the document responsible for this hit.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hit._type">
            <summary>
            The type of document used to create this hit.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hit._id">
            <summary>
            Unique index of the document responsible for this hit.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hit._score">
            <summary>
            The score this hit achieved based on the query criteria.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hit.highlight">
            <summary>
            Highlighting for this hit if highlighting was requested.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hit._source">
            <summary>
            The actual document for this hit (not supplied if fields requested).
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hit.fields">
            <summary>
            The list of fields for this hit extracted from the document (if fields requested).
            </summary>
        </member>
        <member name="T:ElasticLinq.Response.Model.Hits">
            <summary>
            A container of hit responses from Elasticsearch.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hits.total">
            <summary>
            The total number of hits available on the server.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hits.max_score">
            <summary>
            The highest score of a hit for the given query.
            </summary>
        </member>
        <member name="F:ElasticLinq.Response.Model.Hits.hits">
            <summary>
            The list of hits received from the server.
            </summary>
        </member>
        <member name="T:ElasticLinq.Retry.Delay">
            <summary>
            Implements an asynchronous delay. Replaceable for testing purposes (so unit tests don't actually wait).
            </summary>
        </member>
        <member name="F:ElasticLinq.Retry.Delay.Instance">
            <summary>
            Obtain a shared safe instance of the <see cref="T:ElasticLinq.Retry.Delay"/>
            </summary>
        </member>
        <member name="M:ElasticLinq.Retry.Delay.For(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Obtain a task that will delay for a number of milliseconds or until the cancellation token is cancelled.
            </summary>
            <param name="milliseconds">Number of milliseconds to delay for.</param>
            <param name="cancellationToken">Cancellation token to watch for cancellation.</param>
            <returns>Task that will delay for the number of milliseconds.</returns>
        </member>
        <member name="T:ElasticLinq.Retry.IRetryPolicy">
            <summary>
            A policy that can perform an operation one or more times.
            </summary>
        </member>
        <member name="M:ElasticLinq.Retry.IRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{``0,System.Exception,System.Boolean},System.Action{``0,System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Attempts an asynchronous operation one or more times.
            </summary>
            <typeparam name="TResult">The result type from the operation.</typeparam>
            <param name="operationFunc">The lambda which performs the operation once.</param>
            <param name="shouldRetryFunc">The lambda which inspects a result and/or exception and decides whether it should retry the result.</param>
            <param name="appendLogInfoFunc">The lambda which can supplement info logging for failed searches.</param>
            <param name="cancellationToken">The optional token to monitor for cancellation requests.</param>
            <returns>A task with the completed result.</returns>
        </member>
        <member name="T:ElasticLinq.Retry.NullDelay">
            <summary>
            Delay implementation that does not actually delay.
            </summary>
        </member>
        <member name="F:ElasticLinq.Retry.NullDelay.Instance">
            <summary>
            Obtain a shared safe instance of the <see cref="T:ElasticLinq.Retry.NullDelay"/>
            </summary>
        </member>
        <member name="M:ElasticLinq.Retry.NullDelay.For(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Obtain a task that will not delay.
            </summary>
            <param name="milliseconds">This parameter is ignored.</param>
            <param name="cancellationToken">This parameter is ignored.</param>
            <returns>Task that will not delay.</returns>
        </member>
        <member name="T:ElasticLinq.Retry.RetryFailedException">
            <summary>
            The exception that is thrown when an operation does not succeed within a specified number of attempts.
            </summary>
        </member>
        <member name="M:ElasticLinq.Retry.RetryFailedException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Retry.RetryFailedException"/> specifying the number of attempts.
            </summary>
            <param name="maxAttempts">Number of attempts tried.</param>
        </member>
        <member name="T:ElasticLinq.Retry.RetryPolicy">
            <summary>
            An implementation of <see cref="T:ElasticLinq.Retry.IRetryPolicy"/> which implements an exponential back-off strategy.
            </summary>
        </member>
        <member name="M:ElasticLinq.Retry.RetryPolicy.#ctor(ElasticLinq.Logging.ILog,System.Int32,System.Int32,ElasticLinq.Retry.Delay)">
            <summary>
            Retries an operation if the operation is retryable.
            </summary>
            <param name="log">Used for logging debug and warning information.</param>
            <param name="initialRetryMilliseconds">The initial wait time for a retry. Subsequent retries grow exponentially. Defaults to 100ms.</param>
            <param name="maxAttempts">The maximum number of attempts to perform. Defaults to 10 attempts.</param>
            <param name="delay">The object which implements an async delay. Replaceable for testing purposes.</param>
        </member>
        <member name="M:ElasticLinq.Retry.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{``0,System.Exception,System.Boolean},System.Action{``0,System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Test.TestableElasticContext">
            <summary>
            Provides an IElasticContext that can be used by unit tests.
            </summary>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticContext.#ctor(ElasticLinq.Mapping.IElasticMapping,ElasticLinq.Logging.ILog,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Test.TestableElasticContext"/> class.
            </summary>
            <param name="mapping">The <see cref="T:ElasticLinq.Mapping.IElasticMapping"/> used to define mapping between the document and object.</param>
            <param name="log">The  <see cref="T:ElasticLinq.Logging.ILog"/> instance to receive logging information.</param>
            <param name="maxAttempts">Maximum number of attempts to try before failing.</param>
            <param name="timeout">How long to wait before failing a request.</param>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticContext.Data``1">
            <summary>
            The in-memory data to be used for results when performing queries.
            </summary>
            <typeparam name="T">Type of in-memory data to retrieve.</typeparam>
            <returns>The in-memory data of the given type that will be used to test queries against.</returns>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticContext.SetData``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Set the in-memory data for the type given.
            </summary>
            <typeparam name="T">Type of in-memory data to store.</typeparam>
            <param name="values">The objects to use when testing queries against this type.</param>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticContext.SetData``1(``0[])">
            <summary>
            Set the in-memory data for the type given.
            </summary>
            <typeparam name="T">Type of in-memory data to store.</typeparam>
            <param name="values">The objects to use when testing queries against this type.</param>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticContext.Query``1">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticContext.Connection">
            <summary>
            Specifies the connection to the Elasticsearch server.
            </summary>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticContext.Log">
            <summary>
            The logging mechanism for diagnostics information.
            </summary>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticContext.Mapping">
            <summary>
            The mapping to describe how objects and their properties are mapped to Elasticsearch.
            </summary>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticContext.Provider">
            <summary>
            Access the underlying <see cref="T:ElasticLinq.Test.TestableElasticQueryProvider"/>.
            </summary>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticContext.Requests">
            <summary>
            Access the <see cref="T:ElasticLinq.Request.QueryInfo"/> for the request made.
            </summary>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticContext.RetryPolicy">
            <summary>
            The retry policy for handling networking issues.
            </summary>
        </member>
        <member name="T:ElasticLinq.Test.TestableElasticQuery`1">
            <summary>
            Provides an <see cref="T:ElasticLinq.IElasticQuery`1"/> that can be used by unit tests.
            </summary>
            <typeparam name="T">Element type this query is for.</typeparam>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQuery`1.#ctor(ElasticLinq.Test.TestableElasticContext,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Test.TestableElasticQuery`1"/> class.
            </summary>
            <param name="context">The <see cref="T:ElasticLinq.Test.TestableElasticContext"/> this query belongs to.</param>
            <param name="expression">The <see cref="P:ElasticLinq.Test.TestableElasticQuery`1.Expression"/> that represents the LINQ query.</param>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQuery`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQuery`1.ToQueryInfo">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticQuery`1.Context">
            <summary>
            The <see cref="T:ElasticLinq.Test.TestableElasticContext"/> this query belongs to.
            </summary>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticQuery`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticQuery`1.Expression">
            <inheritdoc/>
        </member>
        <member name="P:ElasticLinq.Test.TestableElasticQuery`1.Provider">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Test.TestableElasticQueryProvider">
            <summary>
            Provides an <see cref="T:System.Linq.IQueryProvider"/> that can be used for unit tests.
            </summary>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQueryProvider.#ctor(ElasticLinq.Test.TestableElasticContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ElasticLinq.Test.TestableElasticQueryProvider"/> class.
            </summary>
            <param name="context">The <see cref="T:ElasticLinq.Test.TestableElasticContext"/> used to execute the queries.</param>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ElasticLinq.Test.TestableElasticQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Utility.Argument">
            <summary>
            Argument validation static helpers to reduce noise in other methods.
            </summary>
        </member>
        <member name="M:ElasticLinq.Utility.Argument.EnsureNotNull(System.String,System.Object)">
            <summary>
            Throw an ArgumentNullException if the object is null.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">Object to be checked.</param>
        </member>
        <member name="M:ElasticLinq.Utility.Argument.EnsurePositive(System.String,System.TimeSpan)">
            <summary>
            Throw an ArgumentOutOfRangeException if the TimeSpan is not positive.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">TimeSpan to be checked.</param>
        </member>
        <member name="M:ElasticLinq.Utility.Argument.EnsureNotBlank(System.String,System.String)">
            <summary>
            Throw an ArgumentException if the string is blank.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">String to be checked.</param>
        </member>
        <member name="M:ElasticLinq.Utility.Argument.EnsureIsAssignableFrom``1(System.String,System.Type)">
            <summary>
            Throw an ArgumentException if the type is not assignable.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="type">Type being checked for assignment.</param>
            <typeparam name="T">Type being checked against.</typeparam>
        </member>
        <member name="M:ElasticLinq.Utility.Argument.EnsureIsDefinedEnum``1(System.String,``0)">
            <summary>
            Throw an ArgumentOutOfRangeException if the enum is not defined.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">Enum to be checked.</param>
            <typeparam name="TEnum">Type of the enum being checked.</typeparam>
        </member>
        <member name="M:ElasticLinq.Utility.Argument.EnsureNotEmpty(System.String,System.Collections.ICollection)">
            <summary>
            Throw an ArgumentOutOfRangeException if the collection is empty or null.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="values">Array to be checked.</param>
        </member>
        <member name="T:ElasticLinq.Utility.ExpressionExtensions">
            <summary>
            Extension methods for Expression objects.
            </summary>
        </member>
        <member name="M:ElasticLinq.Utility.ExpressionExtensions.StripQuotes(System.Linq.Expressions.Expression)">
            <summary>
            Remove all the outer quotes from an expression.
            </summary>
            <param name="expression">Expression that might contain outer quotes.</param>
            <returns>Expression that no longer contains outer quotes.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.ExpressionExtensions.GetLambda(System.Linq.Expressions.Expression)">
            <summary>
            Get the lambda for an expression stripping any necessary outer quotes.
            </summary>
            <param name="expression">Expression that should be a lamba possibly wrapped
            in outer quotes.</param>
            <returns>LambdaExpression no longer wrapped in quotes.</returns>
        </member>
        <member name="T:ElasticLinq.Utility.ForcedAuthHandler">
            <summary>
            Forces basic authorization values, since negotiation requires an extra round-trip, which significantly
            increases the time required to search the index.
            </summary>
        </member>
        <member name="M:ElasticLinq.Utility.ForcedAuthHandler.#ctor(System.String,System.String,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new ForcedAuthHandler fora  given username and password.
            </summary>
            <param name="userName">User name to use for authorization.</param>
            <param name="password">Password to use for authorization.</param>
            <param name="innerHandler">HttpMessageHandler to further control HTTP message processing.</param>
        </member>
        <member name="M:ElasticLinq.Utility.ForcedAuthHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ElasticLinq.Utility.TypeHelper">
            <summary>
            Various methods to make reflection and type handling a little
            easier.
            </summary>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.GetReturnType(System.Reflection.MemberInfo)">
            <summary>
            Get the return type of a method, property or field.
            </summary>
            <param name="memberInfo">MemberInfo of the member to be examined.</param>
            <returns>Return type of that member.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the MemberInfo for a given lambda expression to a property.
            </summary>
            <typeparam name="T">Type that declares the property.</typeparam>
            <typeparam name="TValue">Type of property to get the MemberInfo for.</typeparam>
            <param name="lambdaExpression">Lambda expression reference to the property.</param>
            <returns>MemberInfo for the given property.</returns>
            <example>TypeHelper.GetMemberInfo((Customer c) => c.Name);</example>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.GetMethodInfo(System.Type,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            Get the MethodInfo for a method on a type given a predicate to identify it.
            </summary>
            <remarks>
            This will throw if there are zero or more than one matches.
            </remarks>
            <param name="type">Type to examine for the MethodInfo.</param>
            <param name="predicate">Predicate that identifies which method to select.</param>
            <returns>MethodInfo belonging to the method identified.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.GetSequenceElementType(System.Type)">
            <summary>
            Find the element type given a generic sequence type.
            </summary>
            <param name="sequenceType">Sequence type to examine.</param>
            <returns>Element type of the sequence or null if none found.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.FindIEnumerable(System.Type)">
            <summary>
            Find the IEnumerable generic interface for a given sequence type.
            </summary>
            <param name="sequenceType">Sequence type to examine.</param>
            <returns>IEnumerable generic interface or null if not found.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.IsGenericOf(System.Type,System.Type)">
            <summary>
            Determine if the type implements the given generic type definition.
            </summary>
            <param name="type">Type being examined.</param>
            <param name="genericType">Generic type being tested for.</param>
            <returns>True if the type implements the generic type; false otherwise.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.IsNullable(System.Type)">
            <summary>
            Determine if a type is nullable either because it is a reference type or because
            it uses the Nullable generic container.
            </summary>
            <param name="type">Type of the value to consider.</param>
            <returns>True if the type supports nullability; otherwise, false.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.CreateDefault(System.Type)">
            <summary>
            Create a default value for either a value type or reference type. 
            </summary>
            <param name="type">Type of the value to create.</param>
            <returns>Default value for this type.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines if the target type can be assigned to the source type.
            </summary>
            <param name="source">Source type being checked to see if it is assignable.</param>
            <param name="target">Target type being checked to see if it is assignable.</param>
            <returns>True if target type can be assigned from source type.</returns>
        </member>
        <member name="M:ElasticLinq.Utility.TypeHelper.GetSimpleSignature(System.Reflection.MethodInfo)">
            <summary>
            Get a method signature for identifying unsupported method overloads that does not include
            the return type.
            </summary>
            <param name="methodInfo">Method info to obtain simplified signature for.</param>
            <returns>String containing the simplified method signature.</returns>
        </member>
    </members>
</doc>
