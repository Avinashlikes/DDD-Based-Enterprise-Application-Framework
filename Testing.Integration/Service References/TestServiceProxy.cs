//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITestServiceOf_Department")]
public interface ITestServiceOf_Department
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceOf_Department/Insert", ReplyAction="http://tempuri.org/ITestServiceOf_Department/InsertResponse")]
    void Insert(TestEFDomainAndContext.TestDomains.Department item);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceOf_Department/Insert", ReplyAction="http://tempuri.org/ITestServiceOf_Department/InsertResponse")]
    System.Threading.Tasks.Task InsertAsync(TestEFDomainAndContext.TestDomains.Department item);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceOf_Department/Update", ReplyAction="http://tempuri.org/ITestServiceOf_Department/UpdateResponse")]
    void Update(TestEFDomainAndContext.TestDomains.Department item);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceOf_Department/Update", ReplyAction="http://tempuri.org/ITestServiceOf_Department/UpdateResponse")]
    System.Threading.Tasks.Task UpdateAsync(TestEFDomainAndContext.TestDomains.Department item);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceOf_Department/Delete", ReplyAction="http://tempuri.org/ITestServiceOf_Department/DeleteResponse")]
    void Delete(TestEFDomainAndContext.TestDomains.Department item);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceOf_Department/Delete", ReplyAction="http://tempuri.org/ITestServiceOf_Department/DeleteResponse")]
    System.Threading.Tasks.Task DeleteAsync(TestEFDomainAndContext.TestDomains.Department item);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "ITestServiceOf_Employee")]
public interface ITestServiceOf_Employee
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITestServiceOf_Employee/Insert", ReplyAction = "http://tempuri.org/ITestServiceOf_Employee/InsertResponse")]
    void Insert(TestEFDomainAndContext.TestDomains.Employee item);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITestServiceOf_Employee/Insert", ReplyAction = "http://tempuri.org/ITestServiceOf_Employee/InsertResponse")]
    System.Threading.Tasks.Task InsertAsync(TestEFDomainAndContext.TestDomains.Employee item);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITestServiceOf_Employee/Update", ReplyAction = "http://tempuri.org/ITestServiceOf_Employee/UpdateResponse")]
    void Update(TestEFDomainAndContext.TestDomains.Employee item);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITestServiceOf_Employee/Update", ReplyAction = "http://tempuri.org/ITestServiceOf_Employee/UpdateResponse")]
    System.Threading.Tasks.Task UpdateAsync(TestEFDomainAndContext.TestDomains.Employee item);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITestServiceOf_Employee/Delete", ReplyAction = "http://tempuri.org/ITestServiceOf_Employee/DeleteResponse")]
    void Delete(TestEFDomainAndContext.TestDomains.Employee item);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ITestServiceOf_Employee/Delete", ReplyAction = "http://tempuri.org/ITestServiceOf_Employee/DeleteResponse")]
    System.Threading.Tasks.Task DeleteAsync(TestEFDomainAndContext.TestDomains.Employee item);
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITestServiceOf_DepartmentChannel : ITestServiceOf_Department, System.ServiceModel.IClientChannel
{
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITestServiceOf_EmployeeChannel : ITestServiceOf_Employee, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TestServiceOf_DepartmentClient : System.ServiceModel.ClientBase<ITestServiceOf_Department>, ITestServiceOf_Department
{
    
    public TestServiceOf_DepartmentClient()
    {
    }
    
    public TestServiceOf_DepartmentClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TestServiceOf_DepartmentClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TestServiceOf_DepartmentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TestServiceOf_DepartmentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void Insert(TestEFDomainAndContext.TestDomains.Department item)
    {
        base.Channel.Insert(item);
    }
    
    public System.Threading.Tasks.Task InsertAsync(TestEFDomainAndContext.TestDomains.Department item)
    {
        return base.Channel.InsertAsync(item);
    }
    
    public void Update(TestEFDomainAndContext.TestDomains.Department item)
    {
        base.Channel.Update(item);
    }
    
    public System.Threading.Tasks.Task UpdateAsync(TestEFDomainAndContext.TestDomains.Department item)
    {
        return base.Channel.UpdateAsync(item);
    }
    
    public void Delete(TestEFDomainAndContext.TestDomains.Department item)
    {
        base.Channel.Delete(item);
    }
    
    public System.Threading.Tasks.Task DeleteAsync(TestEFDomainAndContext.TestDomains.Department item)
    {
        return base.Channel.DeleteAsync(item);
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TestServiceOf_EmployeeClient : System.ServiceModel.ClientBase<ITestServiceOf_Employee>, ITestServiceOf_Employee
{

    public TestServiceOf_EmployeeClient()
    {
    }

    public TestServiceOf_EmployeeClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public TestServiceOf_EmployeeClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public TestServiceOf_EmployeeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public TestServiceOf_EmployeeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public void Insert(TestEFDomainAndContext.TestDomains.Employee item)
    {
        base.Channel.Insert(item);
    }

    public System.Threading.Tasks.Task InsertAsync(TestEFDomainAndContext.TestDomains.Employee item)
    {
        return base.Channel.InsertAsync(item);
    }

    public void Update(TestEFDomainAndContext.TestDomains.Employee item)
    {
        base.Channel.Update(item);
    }

    public System.Threading.Tasks.Task UpdateAsync(TestEFDomainAndContext.TestDomains.Employee item)
    {
        return base.Channel.UpdateAsync(item);
    }

    public void Delete(TestEFDomainAndContext.TestDomains.Employee item)
    {
        base.Channel.Delete(item);
    }

    public System.Threading.Tasks.Task DeleteAsync(TestEFDomainAndContext.TestDomains.Employee item)
    {
        return base.Channel.DeleteAsync(item);
    }
}
